#include <WiFi.h> //  allows you to access the functions which helps in connecting ESP32 to your wifi
#include <SPI.h> //   This library allows you to communicate with SPI devices
#include <Wire.h> //  This library allows you to communicate with I2C/TWI devices
#include<WiFiClient.h> // This library allows you to declare a client that will be contacting the host (server)
#include <MQ135.h> // This library allows you to access your MQ135 gas sensor
#include "ThingSpeak.h" // This library allows you to read/write data to thingspeak

const char *ssid = "T-SIG MJCET";     // replace with your wifi ssid 
const char *pass = "electrical@456";  // replace with your wpa2 key
const char* server = "api.thingspeak.com"; // storing the url into a variable

WiFiClient  client; // Use WifiClient class to create an object "client" for TCP connection(transferring of data in both the directions)

unsigned long myChannelNumber = 2; // storing channel number in myChannelNumber variable
const char * myWriteAPIKey = "ZUM5IOTBGX0AZNN4"; // enter the api key of your channel

// Timer variables
unsigned long lastTime = 0; 
unsigned long timerDelay = 10000; // In the timerDelay variable, insert how frequently you want to publish the readings.

void setup() {
  Serial.begin(115200);  //Initialize serial
  
  WiFi.mode(WIFI_STA);   // Set the ESP32 as a Wi-Fi station:
  
  ThingSpeak.begin(client);  // Initialize ThingSpeak
}

// In the loop(), connect or reconnect to Wi-Fi in case the connection was lost:

void loop() {
  if ((millis() - lastTime) > timerDelay) { // if the amount of time ESP32 is switched on is greater than timerDelay, we enter the condition
    
    // Connect or reconnect to WiFi
    if(WiFi.status() != WL_CONNECTED){
      Serial.print("Attempting to connect");
      while(WiFi.status() != WL_CONNECTED){
        WiFi.begin(ssid, pass); 
        delay(5000);
      } 
      Serial.println("\nConnected.");
    }

    MQ135 gasSensor = MQ135(A0); // initialising the pin of MQ135 gas sensor
    float air_quality = gasSensor.getPPM(); // getting the air quality from an in-built function
    Serial.print("Air Quality: ");  
    Serial.print(air_quality);
    Serial.println("  PPM");
    Serial.println();
    
    
    // Write to ThingSpeak. There are up to 8 fields in a channel, allowing you to store up to 8 different
    // pieces of information in a channel.  Here, we write to field 1.

     // the writeField() method accepts the arguments of:

      // --> the channel number;
      // --> the field number (in our case, we just have one field);
      // --> the value you want to publish, air_quality in our case
      // --> your write API key.
    
     int x = ThingSpeak.writeField(myChannelNumber, 1, air_quality, myWriteAPIKey);
     
    if(x == 200){
      Serial.println("Channel update successful.");
    }
    else{
      Serial.println("Problem updating channel. HTTP error code " + String(x));
    }
    lastTime = millis();
  }
}
